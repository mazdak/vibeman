// This file is auto-generated by @hey-api/openapi-ts

export type ConfigStorageConfig = {
    /**
     * Default repos location
     */
    repositories_path?: string;
    /**
     * Default worktree location
     */
    worktrees_path?: string;
};

export type DbRepository = {
    created_at?: string;
    description?: string;
    id?: string;
    name?: string;
    /**
     * Local filesystem path
     */
    path?: string;
    updated_at?: string;
};

export type DbWorktree = {
    branch?: string;
    created_at?: string;
    id?: string;
    name?: string;
    /**
     * Filesystem path to worktree
     */
    path?: string;
    repository_id?: string;
    status?: DbWorktreeStatus;
    updated_at?: string;
};

export type DbWorktreeStatus = 'stopped' | 'starting' | 'running' | 'stopping' | 'error';

export type ServerAddRepositoryRequest = {
    description?: string;
    name: string;
    path: string;
};

export type ServerConfigResponse = {
    container?: ServerContainerConfig;
    git?: ServerGitConfig;
    storage?: ConfigStorageConfig;
};

export type ServerContainerActionRequest = {
    action: 'start' | 'stop' | 'restart';
};

export type ServerContainerConfig = {
    auto_start?: boolean;
    default_runtime?: string;
};

export type ServerContainerLogsResponse = {
    logs?: Array<string>;
    timestamp?: string;
};

export type ServerContainerResponse = {
    created_at?: string;
    id?: string;
    image?: string;
    labels?: {
        [key: string]: string;
    };
    name?: string;
    ports?: Array<string>;
    repository?: string;
    state?: string;
    status?: string;
    worktree?: string;
};

export type ServerContainersResponse = {
    containers?: Array<ServerContainerResponse>;
    total?: number;
};

export type ServerCreateContainerRequest = {
    auto_start?: boolean;
    env?: {
        [key: string]: string;
    };
    image: string;
    ports?: Array<string>;
    repository: string;
    worktree?: string;
};

export type ServerCreateWorktreeRequest = {
    auto_start?: boolean;
    base_branch?: string;
    branch?: string;
    compose_file?: string;
    compose_services?: Array<string>;
    container_image?: string;
    name: string;
    post_scripts?: Array<string>;
    repository_id: string;
    skip_setup?: boolean;
};

export type ServerErrorResponse = {
    error?: string;
};

export type ServerGitConfig = {
    auto_fetch?: boolean;
    default_branch_prefix?: string;
};

export type ServerLogsResponse = {
    id?: string;
    lines?: number;
    logs?: Array<string>;
    source?: string;
    timestamp?: string;
};

export type ServerRepositoriesResponse = {
    repositories?: Array<DbRepository>;
    total?: number;
};

export type ServerService = {
    container_id?: string;
    created_at?: string;
    id?: string;
    name?: string;
    port?: number;
    status?: string;
    type?: string;
};

export type ServerServiceHealthStatus = {
    container_engine?: string;
    database?: string;
    git?: string;
};

export type ServerServicesResponse = {
    services?: Array<ServerService>;
    total?: number;
};

export type ServerSuccessResponse = {
    message?: string;
};

export type ServerSystemStatusResponse = {
    containers?: number;
    repositories?: number;
    services?: ServerServiceHealthStatus;
    status?: string;
    uptime?: string;
    version?: string;
    worktrees?: number;
};

export type ServerWorktreeStatusResponse = {
    id?: string;
    message?: string;
    status?: string;
};

export type ServerWorktreesResponse = {
    total?: number;
    worktrees?: Array<DbWorktree>;
};

export type GetApiAiAttachByWorktreeData = {
    body?: never;
    path: {
        /**
         * Worktree name
         */
        worktree: string;
    };
    query?: never;
    url: '/api/ai/attach/{worktree}';
};

export type GetApiAiAttachByWorktreeErrors = {
    /**
     * Bad Request
     */
    400: ServerErrorResponse;
    /**
     * Not Found
     */
    404: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
};

export type GetApiAiAttachByWorktreeError = GetApiAiAttachByWorktreeErrors[keyof GetApiAiAttachByWorktreeErrors];

export type GetApiContainersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by repository
         */
        repository?: string;
        /**
         * Filter by status
         */
        status?: string;
    };
    url: '/api/containers';
};

export type GetApiContainersErrors = {
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
    /**
     * Service Unavailable
     */
    503: ServerErrorResponse;
};

export type GetApiContainersError = GetApiContainersErrors[keyof GetApiContainersErrors];

export type GetApiContainersResponses = {
    /**
     * OK
     */
    200: ServerContainersResponse;
};

export type GetApiContainersResponse = GetApiContainersResponses[keyof GetApiContainersResponses];

export type PostApiContainersData = {
    /**
     * Container configuration
     */
    body: ServerCreateContainerRequest;
    path?: never;
    query?: never;
    url: '/api/containers';
};

export type PostApiContainersErrors = {
    /**
     * Bad Request
     */
    400: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
    /**
     * Service Unavailable
     */
    503: ServerErrorResponse;
};

export type PostApiContainersError = PostApiContainersErrors[keyof PostApiContainersErrors];

export type PostApiContainersResponses = {
    /**
     * Created
     */
    201: ServerContainerResponse;
};

export type PostApiContainersResponse = PostApiContainersResponses[keyof PostApiContainersResponses];

export type DeleteApiContainersByIdData = {
    body?: never;
    path: {
        /**
         * Container ID
         */
        id: string;
    };
    query?: never;
    url: '/api/containers/{id}';
};

export type DeleteApiContainersByIdErrors = {
    /**
     * Not Found
     */
    404: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
    /**
     * Service Unavailable
     */
    503: ServerErrorResponse;
};

export type DeleteApiContainersByIdError = DeleteApiContainersByIdErrors[keyof DeleteApiContainersByIdErrors];

export type DeleteApiContainersByIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type DeleteApiContainersByIdResponse = DeleteApiContainersByIdResponses[keyof DeleteApiContainersByIdResponses];

export type GetApiContainersByIdData = {
    body?: never;
    path: {
        /**
         * Container ID
         */
        id: string;
    };
    query?: never;
    url: '/api/containers/{id}';
};

export type GetApiContainersByIdErrors = {
    /**
     * Not Found
     */
    404: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
    /**
     * Service Unavailable
     */
    503: ServerErrorResponse;
};

export type GetApiContainersByIdError = GetApiContainersByIdErrors[keyof GetApiContainersByIdErrors];

export type GetApiContainersByIdResponses = {
    /**
     * OK
     */
    200: ServerContainerResponse;
};

export type GetApiContainersByIdResponse = GetApiContainersByIdResponses[keyof GetApiContainersByIdResponses];

export type PostApiContainersByIdActionData = {
    /**
     * Action to perform
     */
    body: ServerContainerActionRequest;
    path: {
        /**
         * Container ID
         */
        id: string;
    };
    query?: never;
    url: '/api/containers/{id}/action';
};

export type PostApiContainersByIdActionErrors = {
    /**
     * Bad Request
     */
    400: ServerErrorResponse;
    /**
     * Not Found
     */
    404: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
    /**
     * Service Unavailable
     */
    503: ServerErrorResponse;
};

export type PostApiContainersByIdActionError = PostApiContainersByIdActionErrors[keyof PostApiContainersByIdActionErrors];

export type PostApiContainersByIdActionResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type PostApiContainersByIdActionResponse = PostApiContainersByIdActionResponses[keyof PostApiContainersByIdActionResponses];

export type GetApiContainersByIdLogsData = {
    body?: never;
    path: {
        /**
         * Container ID
         */
        id: string;
    };
    query?: {
        /**
         * Follow log output
         */
        follow?: boolean;
        /**
         * Number of lines to show from end of logs
         */
        tail?: number;
    };
    url: '/api/containers/{id}/logs';
};

export type GetApiContainersByIdLogsErrors = {
    /**
     * Not Found
     */
    404: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
    /**
     * Service Unavailable
     */
    503: ServerErrorResponse;
};

export type GetApiContainersByIdLogsError = GetApiContainersByIdLogsErrors[keyof GetApiContainersByIdLogsErrors];

export type GetApiContainersByIdLogsResponses = {
    /**
     * OK
     */
    200: ServerContainerLogsResponse;
};

export type GetApiContainersByIdLogsResponse = GetApiContainersByIdLogsResponses[keyof GetApiContainersByIdLogsResponses];

export type GetApiServicesByIdLogsData = {
    body?: never;
    path: {
        /**
         * Service ID
         */
        id: string;
    };
    query?: {
        /**
         * Number of lines to retrieve
         */
        lines?: number;
        /**
         * Follow log output
         */
        follow?: boolean;
    };
    url: '/api/services/{id}/logs';
};

export type GetApiServicesByIdLogsErrors = {
    /**
     * Not Found
     */
    404: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
    /**
     * Service Unavailable
     */
    503: ServerErrorResponse;
};

export type GetApiServicesByIdLogsError = GetApiServicesByIdLogsErrors[keyof GetApiServicesByIdLogsErrors];

export type GetApiServicesByIdLogsResponses = {
    /**
     * OK
     */
    200: ServerLogsResponse;
};

export type GetApiServicesByIdLogsResponse = GetApiServicesByIdLogsResponses[keyof GetApiServicesByIdLogsResponses];

export type GetApiStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/status';
};

export type GetApiStatusErrors = {
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
};

export type GetApiStatusError = GetApiStatusErrors[keyof GetApiStatusErrors];

export type GetApiStatusResponses = {
    /**
     * OK
     */
    200: ServerSystemStatusResponse;
};

export type GetApiStatusResponse = GetApiStatusResponses[keyof GetApiStatusResponses];

export type GetApiWorktreesByIdLogsData = {
    body?: never;
    path: {
        /**
         * Worktree ID
         */
        id: string;
    };
    query?: {
        /**
         * Number of lines to retrieve
         */
        lines?: number;
        /**
         * Follow log output
         */
        follow?: boolean;
    };
    url: '/api/worktrees/{id}/logs';
};

export type GetApiWorktreesByIdLogsErrors = {
    /**
     * Not Found
     */
    404: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
    /**
     * Service Unavailable
     */
    503: ServerErrorResponse;
};

export type GetApiWorktreesByIdLogsError = GetApiWorktreesByIdLogsErrors[keyof GetApiWorktreesByIdLogsErrors];

export type GetApiWorktreesByIdLogsResponses = {
    /**
     * OK
     */
    200: ServerLogsResponse;
};

export type GetApiWorktreesByIdLogsResponse = GetApiWorktreesByIdLogsResponses[keyof GetApiWorktreesByIdLogsResponses];

export type GetConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/config';
};

export type GetConfigErrors = {
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
};

export type GetConfigError = GetConfigErrors[keyof GetConfigErrors];

export type GetConfigResponses = {
    /**
     * OK
     */
    200: ServerConfigResponse;
};

export type GetConfigResponse = GetConfigResponses[keyof GetConfigResponses];

export type GetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type GetHealthResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses];

export type GetRepositoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/repositories';
};

export type GetRepositoriesErrors = {
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
};

export type GetRepositoriesError = GetRepositoriesErrors[keyof GetRepositoriesErrors];

export type GetRepositoriesResponses = {
    /**
     * OK
     */
    200: ServerRepositoriesResponse;
};

export type GetRepositoriesResponse = GetRepositoriesResponses[keyof GetRepositoriesResponses];

export type PostRepositoriesData = {
    /**
     * Repository details
     */
    body: ServerAddRepositoryRequest;
    path?: never;
    query?: never;
    url: '/repositories';
};

export type PostRepositoriesErrors = {
    /**
     * Bad Request
     */
    400: ServerErrorResponse;
    /**
     * Conflict
     */
    409: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
};

export type PostRepositoriesError = PostRepositoriesErrors[keyof PostRepositoriesErrors];

export type PostRepositoriesResponses = {
    /**
     * Created
     */
    201: DbRepository;
};

export type PostRepositoriesResponse = PostRepositoriesResponses[keyof PostRepositoriesResponses];

export type DeleteRepositoriesByIdData = {
    body?: never;
    path: {
        /**
         * Repository ID
         */
        id: string;
    };
    query?: never;
    url: '/repositories/{id}';
};

export type DeleteRepositoriesByIdErrors = {
    /**
     * Bad Request
     */
    400: ServerErrorResponse;
    /**
     * Not Found
     */
    404: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
};

export type DeleteRepositoriesByIdError = DeleteRepositoriesByIdErrors[keyof DeleteRepositoriesByIdErrors];

export type DeleteRepositoriesByIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type DeleteRepositoriesByIdResponse = DeleteRepositoriesByIdResponses[keyof DeleteRepositoriesByIdResponses];

export type GetServicesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/services';
};

export type GetServicesErrors = {
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
};

export type GetServicesError = GetServicesErrors[keyof GetServicesErrors];

export type GetServicesResponses = {
    /**
     * OK
     */
    200: ServerServicesResponse;
};

export type GetServicesResponse = GetServicesResponses[keyof GetServicesResponses];

export type PostServicesByIdStartData = {
    body?: never;
    path: {
        /**
         * Service ID
         */
        id: string;
    };
    query?: never;
    url: '/services/{id}/start';
};

export type PostServicesByIdStartErrors = {
    /**
     * Bad Request
     */
    400: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
};

export type PostServicesByIdStartError = PostServicesByIdStartErrors[keyof PostServicesByIdStartErrors];

export type PostServicesByIdStartResponses = {
    /**
     * OK
     */
    200: ServerSuccessResponse;
};

export type PostServicesByIdStartResponse = PostServicesByIdStartResponses[keyof PostServicesByIdStartResponses];

export type PostServicesByIdStopData = {
    body?: never;
    path: {
        /**
         * Service ID
         */
        id: string;
    };
    query?: never;
    url: '/services/{id}/stop';
};

export type PostServicesByIdStopErrors = {
    /**
     * Bad Request
     */
    400: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
};

export type PostServicesByIdStopError = PostServicesByIdStopErrors[keyof PostServicesByIdStopErrors];

export type PostServicesByIdStopResponses = {
    /**
     * OK
     */
    200: ServerSuccessResponse;
};

export type PostServicesByIdStopResponse = PostServicesByIdStopResponses[keyof PostServicesByIdStopResponses];

export type GetWorktreesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by repository ID
         */
        repository_id?: string;
        /**
         * Filter by status
         */
        status?: string;
    };
    url: '/worktrees';
};

export type GetWorktreesErrors = {
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
    /**
     * Service Unavailable
     */
    503: ServerErrorResponse;
};

export type GetWorktreesError = GetWorktreesErrors[keyof GetWorktreesErrors];

export type GetWorktreesResponses = {
    /**
     * OK
     */
    200: ServerWorktreesResponse;
};

export type GetWorktreesResponse = GetWorktreesResponses[keyof GetWorktreesResponses];

export type PostWorktreesData = {
    /**
     * Worktree creation request
     */
    body: ServerCreateWorktreeRequest;
    path?: never;
    query?: never;
    url: '/worktrees';
};

export type PostWorktreesErrors = {
    /**
     * Bad Request
     */
    400: ServerErrorResponse;
    /**
     * Conflict
     */
    409: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
    /**
     * Service Unavailable
     */
    503: ServerErrorResponse;
};

export type PostWorktreesError = PostWorktreesErrors[keyof PostWorktreesErrors];

export type PostWorktreesResponses = {
    /**
     * Created
     */
    201: DbWorktree;
};

export type PostWorktreesResponse = PostWorktreesResponses[keyof PostWorktreesResponses];

export type GetWorktreesByIdData = {
    body?: never;
    path: {
        /**
         * Worktree ID
         */
        id: string;
    };
    query?: never;
    url: '/worktrees/{id}';
};

export type GetWorktreesByIdErrors = {
    /**
     * Bad Request
     */
    400: ServerErrorResponse;
    /**
     * Not Found
     */
    404: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
    /**
     * Service Unavailable
     */
    503: ServerErrorResponse;
};

export type GetWorktreesByIdError = GetWorktreesByIdErrors[keyof GetWorktreesByIdErrors];

export type GetWorktreesByIdResponses = {
    /**
     * OK
     */
    200: DbWorktree;
};

export type GetWorktreesByIdResponse = GetWorktreesByIdResponses[keyof GetWorktreesByIdResponses];

export type PostWorktreesByIdStartData = {
    body?: never;
    path: {
        /**
         * Worktree ID
         */
        id: string;
    };
    query?: never;
    url: '/worktrees/{id}/start';
};

export type PostWorktreesByIdStartErrors = {
    /**
     * Bad Request
     */
    400: ServerErrorResponse;
    /**
     * Not Found
     */
    404: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
    /**
     * Service Unavailable
     */
    503: ServerErrorResponse;
};

export type PostWorktreesByIdStartError = PostWorktreesByIdStartErrors[keyof PostWorktreesByIdStartErrors];

export type PostWorktreesByIdStartResponses = {
    /**
     * OK
     */
    200: ServerWorktreeStatusResponse;
};

export type PostWorktreesByIdStartResponse = PostWorktreesByIdStartResponses[keyof PostWorktreesByIdStartResponses];

export type PostWorktreesByIdStopData = {
    body?: never;
    path: {
        /**
         * Worktree ID
         */
        id: string;
    };
    query?: never;
    url: '/worktrees/{id}/stop';
};

export type PostWorktreesByIdStopErrors = {
    /**
     * Bad Request
     */
    400: ServerErrorResponse;
    /**
     * Not Found
     */
    404: ServerErrorResponse;
    /**
     * Internal Server Error
     */
    500: ServerErrorResponse;
    /**
     * Service Unavailable
     */
    503: ServerErrorResponse;
};

export type PostWorktreesByIdStopError = PostWorktreesByIdStopErrors[keyof PostWorktreesByIdStopErrors];

export type PostWorktreesByIdStopResponses = {
    /**
     * OK
     */
    200: ServerWorktreeStatusResponse;
};

export type PostWorktreesByIdStopResponse = PostWorktreesByIdStopResponses[keyof PostWorktreesByIdStopResponses];

export type ClientOptions = {
    baseUrl: string;
};