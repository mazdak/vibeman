// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetApiAiAttachByWorktreeData, GetApiAiAttachByWorktreeErrors, GetApiContainersData, GetApiContainersResponses, GetApiContainersErrors, PostApiContainersData, PostApiContainersResponses, PostApiContainersErrors, DeleteApiContainersByIdData, DeleteApiContainersByIdResponses, DeleteApiContainersByIdErrors, GetApiContainersByIdData, GetApiContainersByIdResponses, GetApiContainersByIdErrors, PostApiContainersByIdActionData, PostApiContainersByIdActionResponses, PostApiContainersByIdActionErrors, GetApiContainersByIdLogsData, GetApiContainersByIdLogsResponses, GetApiContainersByIdLogsErrors, GetApiServicesByIdLogsData, GetApiServicesByIdLogsResponses, GetApiServicesByIdLogsErrors, GetApiStatusData, GetApiStatusResponses, GetApiStatusErrors, GetApiWorktreesByIdLogsData, GetApiWorktreesByIdLogsResponses, GetApiWorktreesByIdLogsErrors, GetConfigData, GetConfigResponses, GetConfigErrors, GetHealthData, GetHealthResponses, GetRepositoriesData, GetRepositoriesResponses, GetRepositoriesErrors, PostRepositoriesData, PostRepositoriesResponses, PostRepositoriesErrors, DeleteRepositoriesByIdData, DeleteRepositoriesByIdResponses, DeleteRepositoriesByIdErrors, GetServicesData, GetServicesResponses, GetServicesErrors, PostServicesByIdStartData, PostServicesByIdStartResponses, PostServicesByIdStartErrors, PostServicesByIdStopData, PostServicesByIdStopResponses, PostServicesByIdStopErrors, GetWorktreesData, GetWorktreesResponses, GetWorktreesErrors, PostWorktreesData, PostWorktreesResponses, PostWorktreesErrors, GetWorktreesByIdData, GetWorktreesByIdResponses, GetWorktreesByIdErrors, PostWorktreesByIdStartData, PostWorktreesByIdStartResponses, PostWorktreesByIdStartErrors, PostWorktreesByIdStopData, PostWorktreesByIdStopResponses, PostWorktreesByIdStopErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * WebSocket endpoint for AI container terminal
 * Establish WebSocket connection for terminal access to AI containers
 */
export const getApiAiAttachByWorktree = <ThrowOnError extends boolean = false>(options: Options<GetApiAiAttachByWorktreeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetApiAiAttachByWorktreeErrors, ThrowOnError>({
        url: '/api/ai/attach/{worktree}',
        ...options
    });
};

/**
 * List containers
 * Get a list of all containers
 */
export const getApiContainers = <ThrowOnError extends boolean = false>(options?: Options<GetApiContainersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiContainersResponses, GetApiContainersErrors, ThrowOnError>({
        url: '/api/containers',
        ...options
    });
};

/**
 * Create container
 * Create a new container
 */
export const postApiContainers = <ThrowOnError extends boolean = false>(options: Options<PostApiContainersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiContainersResponses, PostApiContainersErrors, ThrowOnError>({
        url: '/api/containers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete container
 * Delete a container by ID
 */
export const deleteApiContainersById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiContainersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiContainersByIdResponses, DeleteApiContainersByIdErrors, ThrowOnError>({
        url: '/api/containers/{id}',
        ...options
    });
};

/**
 * Get container by ID
 * Get a specific container by its ID
 */
export const getApiContainersById = <ThrowOnError extends boolean = false>(options: Options<GetApiContainersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiContainersByIdResponses, GetApiContainersByIdErrors, ThrowOnError>({
        url: '/api/containers/{id}',
        ...options
    });
};

/**
 * Perform action on container
 * Start, stop, or restart a container
 */
export const postApiContainersByIdAction = <ThrowOnError extends boolean = false>(options: Options<PostApiContainersByIdActionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiContainersByIdActionResponses, PostApiContainersByIdActionErrors, ThrowOnError>({
        url: '/api/containers/{id}/action',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get container logs
 * Get logs from a container
 */
export const getApiContainersByIdLogs = <ThrowOnError extends boolean = false>(options: Options<GetApiContainersByIdLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiContainersByIdLogsResponses, GetApiContainersByIdLogsErrors, ThrowOnError>({
        url: '/api/containers/{id}/logs',
        ...options
    });
};

/**
 * Get service logs
 * Get logs from a specific service
 */
export const getApiServicesByIdLogs = <ThrowOnError extends boolean = false>(options: Options<GetApiServicesByIdLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiServicesByIdLogsResponses, GetApiServicesByIdLogsErrors, ThrowOnError>({
        url: '/api/services/{id}/logs',
        ...options
    });
};

/**
 * System status
 * Get comprehensive system status including service health and resource counts
 */
export const getApiStatus = <ThrowOnError extends boolean = false>(options?: Options<GetApiStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiStatusResponses, GetApiStatusErrors, ThrowOnError>({
        url: '/api/status',
        ...options
    });
};

/**
 * Get worktree logs
 * Get logs from a specific worktree
 */
export const getApiWorktreesByIdLogs = <ThrowOnError extends boolean = false>(options: Options<GetApiWorktreesByIdLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiWorktreesByIdLogsResponses, GetApiWorktreesByIdLogsErrors, ThrowOnError>({
        url: '/api/worktrees/{id}/logs',
        ...options
    });
};

/**
 * Get global configuration
 * Get the global Vibeman configuration
 */
export const getConfig = <ThrowOnError extends boolean = false>(options?: Options<GetConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigResponses, GetConfigErrors, ThrowOnError>({
        url: '/config',
        ...options
    });
};

/**
 * Health check
 * Check if the API is healthy
 */
export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * List repositories
 * Get a list of tracked repositories
 */
export const getRepositories = <ThrowOnError extends boolean = false>(options?: Options<GetRepositoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRepositoriesResponses, GetRepositoriesErrors, ThrowOnError>({
        url: '/repositories',
        ...options
    });
};

/**
 * Add a repository
 * Add a repository to the tracked list
 */
export const postRepositories = <ThrowOnError extends boolean = false>(options: Options<PostRepositoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRepositoriesResponses, PostRepositoriesErrors, ThrowOnError>({
        url: '/repositories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a repository
 * Stop tracking a repository (doesn't delete files)
 */
export const deleteRepositoriesById = <ThrowOnError extends boolean = false>(options: Options<DeleteRepositoriesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRepositoriesByIdResponses, DeleteRepositoriesByIdErrors, ThrowOnError>({
        url: '/repositories/{id}',
        ...options
    });
};

/**
 * List services
 * Get a list of available services
 */
export const getServices = <ThrowOnError extends boolean = false>(options?: Options<GetServicesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetServicesResponses, GetServicesErrors, ThrowOnError>({
        url: '/services',
        ...options
    });
};

/**
 * Start a service
 * Start a specific service by ID
 */
export const postServicesByIdStart = <ThrowOnError extends boolean = false>(options: Options<PostServicesByIdStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostServicesByIdStartResponses, PostServicesByIdStartErrors, ThrowOnError>({
        url: '/services/{id}/start',
        ...options
    });
};

/**
 * Stop a service
 * Stop a specific service by ID
 */
export const postServicesByIdStop = <ThrowOnError extends boolean = false>(options: Options<PostServicesByIdStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostServicesByIdStopResponses, PostServicesByIdStopErrors, ThrowOnError>({
        url: '/services/{id}/stop',
        ...options
    });
};

/**
 * List worktrees
 * Get a list of worktrees with optional filters
 */
export const getWorktrees = <ThrowOnError extends boolean = false>(options?: Options<GetWorktreesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorktreesResponses, GetWorktreesErrors, ThrowOnError>({
        url: '/worktrees',
        ...options
    });
};

/**
 * Create a new worktree
 * Create a new development worktree for a repository
 */
export const postWorktrees = <ThrowOnError extends boolean = false>(options: Options<PostWorktreesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorktreesResponses, PostWorktreesErrors, ThrowOnError>({
        url: '/worktrees',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get worktree by ID
 * Get a specific worktree by its ID
 */
export const getWorktreesById = <ThrowOnError extends boolean = false>(options: Options<GetWorktreesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorktreesByIdResponses, GetWorktreesByIdErrors, ThrowOnError>({
        url: '/worktrees/{id}',
        ...options
    });
};

/**
 * Start a worktree
 * Start a stopped worktree and its associated container
 */
export const postWorktreesByIdStart = <ThrowOnError extends boolean = false>(options: Options<PostWorktreesByIdStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorktreesByIdStartResponses, PostWorktreesByIdStartErrors, ThrowOnError>({
        url: '/worktrees/{id}/start',
        ...options
    });
};

/**
 * Stop a worktree
 * Stop a running worktree and its associated container
 */
export const postWorktreesByIdStop = <ThrowOnError extends boolean = false>(options: Options<PostWorktreesByIdStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorktreesByIdStopResponses, PostWorktreesByIdStopErrors, ThrowOnError>({
        url: '/worktrees/{id}/stop',
        ...options
    });
};